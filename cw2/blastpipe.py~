#!/usr/bin/python

import sys, getopt
from os import path
from subprocess import check_call, check_output

# Checks if the BLAST database exists yet
def checkDbCreated(dbName):
    if path.isfile(dbName + ".phr") and path.isfile(dbName + ".pin") and path.isfile(dbName + ".psq"):
        return True
    return False

def getFileContents(fileName):
    if not path.isfile(fileName):
        raise IOError("Unable to find file \"" + fileName + "\"")
    with open(fileName) as f:
        content = f.readlines()
    if not content or len(content) is 0:
        raise IOError("File \"" + fileName + "\" appears to be empty")
    return content

# Creates the BLAST database from a given FASTA file
def createDb(dbName):
    dbFile = dbName + ".fa"
    print("Trying to create database from \"" + dbFile + "\"")
    if not path.isfile(dbFile):
        raise IOError("Unable to find FASTA file: \"" + dbFile + "\" when making database.")
    check_call(["makeblastdb", "-in", dbName + ".fa", "-dbtype", "prot", "-out", dbName])

# Ensures the BLAST database exists and creates it if it does not
def verifyDb(dbName):
    if not checkDbCreated(dbName):
        print("Can't find database for " + dbName)
        createDb(dbName)
    else:
        print("Found database for " + dbName)

# Performs a query from a file against a database
def queryDb(dbName, queryFile):
    print("Querying \"" + dbName + "\" with \"" + queryFile + "\"")
    if not path.isfile(queryFile):
        raise IOError("Unable to find query file \"" + queryFile + "\"")
    outFile =  queryFile + ".out"
    check_call(["blastp", "-db", dbName, "-query", queryFile, "-out", outFile])
    print("Wrote output to " + outFile)
    return outFile

def processLinesUntil(content, index, until, stripLines):
    # Quit if we reach the end sequence
    if content[index].startswith(until):
        return "";
    line = content[index]
    if stripLines:
        line = line.replace("\n", '').replace("\r\n", '')
    # Keep processing the subsequent lines
    return line + processLinesUntil(content, index + 1, until, stripLines)

def processMatchLine(content, index):
    # Length denotes the end of the output
    line = processLinesUntil(content, index, "Length", True)
    if line.startswith("> "):
        line = line[2:] # split off the "> " character
    return line

# Gets the full description of significant hits in the file
def findQueryMatches(outFile):
    print("Parsing query match results")
    content = getFileContents(outFile)
    matches = []
    for i in range(1, len(content)):
        line = content[i]
        if line.startswith(">"):
            match = processMatchLine(content, i)
            matches.append(match)
    return matches

# Gets the identifier of a match
def getMatchIdentifier(match):
    return match.split(' ', 1)[0]

# Extracts the matched sequences from the source db
# The extracted sequences will be over multiple lines
def extractMatchedSequences(dbName, queryFile, matches):
    dbFile = dbName + ".fa"
    print("Extracting matching sequences from FASTA file \"" + dbFile + "\"")
    content = getFileContents(dbFile)
    sequences = []
    for i in range(1, len(content)):
        if content[i].startswith(">"):
            for match in matches:
                identifier = getMatchIdentifier(match)
                if content[i].startswith(">" + identifier):
                    sequence = content[i] + processLinesUntil(content, i + 1, ">", False)
                    sequences.append(sequence)
    return sequences

# Outputs the entire match description
def printMatchesVerbose(matches):
    if len(matches) > 0:
        print("Significant matches:")
        for match in matches:
            print(match)
    else:
        print("Unable to find any significant matches")

# Outputs just the identifier of a match
def printMatchesIdentifiers(matches):
    if len(matches) > 0:
        print("Identifiers of significant matches:")
        for match in matches:
            print(getMatchIdentifier(match))
    else:
        print("Unable to find any significant matches")

# Outputs a series of sequences to a file
def writeSequencesToFile(queryFile, sequences):
    sequenceFile = queryFile + ".matched_sequences.fa"
    print("Writing matched sequences to \"" + sequenceFile + "\"")
    fh = open(sequenceFile,"w")
    for sequence in sequences:
        fh.write(sequence)
    fh.close()

    return sequenceFile

# Pipes the entire set of operations together
def blastpipe(dbName, queryFile):
    global printVerbose
    global printIds
    if dbName.endswith(".fa"):
        dbName = dbName[:-3]
    verifyDb(dbName)
    outFile = queryDb(dbName, queryFile)
    matches = findQueryMatches(outFile)
    if printVerbose:
        printMatchesVerbose(matches)
    if printIds:
        printMatchesIdentifiers(matches)
    sequences = extractMatchedSequences(dbName, queryFile, matches)
    sequenceFile = writeSequencesToFile(queryFile, sequences)

def printQuestion(number):
    print("Question " + number)
    print("--------------------------")

def question17(dbName, queryFile):
    printQuestion("17")
    global printVerbose
    global printIds
    printVerbose = False
    printIds = True
    blastpipe(dbName, queryFile)

def question18(dbName, queryFile):
    printQuestion("18")
    global printVerbose
    global printIds
    printVerbose = False
    printIds = False
    blastpipe(dbName, queryFile)

def useage():
    print("blastpipe.py -q <queryfile> [-d <database>] [-v (verbose)] [-i (output identifiers)]")

# Program start
def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:],"viq:d:?:")
        dbName = "astral.1.75.fa"
        queryFile = ''
        questionNumber = ''
        global printVerbose
        global printIds
        printVerbose = False
        printIds = False
        for opt, arg in opts:
            if opt == '-v':
                printVerbose = True
            elif opt == '-i':
                printIds = True
            elif opt == '-d':
                dbName = arg
            elif opt == '-q':
                queryFile = arg
            elif opt == '-?':
                questionNumber = arg
            else:
                useage()
                sys.exit(1)
        if len(queryFile) is 0:
            raise IOError("Specify a query file with -q <filename>")
        if questionNumber == '17':
            question17(dbName, queryFile)
        elif questionNumber == '18':
            question18(dbName, queryFile)
        else:
            blastpipe(dbName, queryFile)
        print ("Done")
    except getopt.GetoptError:
        useage()
        sys.exit(1)
    except Exception as e:
        print("Program Error:")
        print(e)
        sys.exit(1)
    sys.exit(0)

if __name__ == "__main__":
    main()
